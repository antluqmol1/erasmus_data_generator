import os
import random
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, time

from llm_helpers import get_universities, get_alegation_motives, get_process_patterns

# ---- Configuraci√≥n general ----
NUM_ESTUDIANTES = 2117
NUM_DESTINOS = 372
PCT_ESTUDIANTES_CON_ALEGACIONES = 0.175
RUTA_DATA = "data"
USE_LLM = True  # <<--- Activamos o desactivamos llamadas a LLM

# Creamos carpeta data si no existe
os.makedirs(RUTA_DATA, exist_ok=True)

# ---- Plazos Clave (Curso 23-24 de ejemplo) ----
PLAZOS = {
    # ID Actividad: (Fecha Inicio Plazo, Fecha Fin Plazo)
    # -- IDs Nuevos (Original - 1, IDs >=2) --
    # Actividad "Inscripci√≥n Programa Erasmus Registrada" (Original ID 5) -> Nuevo ID 4
    4: (datetime(2022, 11, 2), datetime(2022, 11, 30)),
    # Actividad "Alegaci√≥n Presentada" (Original ID 8) -> Nuevo ID 7
    7: (datetime(2022, 12, 12), datetime(2022, 12, 27)),
    # Actividad "Respuesta Recibida (Aceptaci√≥n/Reserva 1¬™ Adj.)" (Original ID 12) -> Nuevo ID 11
    11: (datetime(2023, 1, 11), datetime(2023, 1, 17)),
    # Actividad "Respuesta Recibida (Renuncia 1¬™ Adj.)" (Original ID 13) -> Nuevo ID 12
    12: (datetime(2023, 1, 11), datetime(2023, 1, 17)),
    # Actividad "Respuesta Recibida (Aceptaci√≥n/Reserva 2¬™ Adj.)" (Original ID 16) -> Nuevo ID 15
    15: (datetime(2023, 1, 19), datetime(2023, 1, 23)),
    # Actividad "Respuesta Recibida (Renuncia 2¬™ Adj.)" (Original ID 17) -> Nuevo ID 16
    16: (datetime(2023, 1, 19), datetime(2023, 1, 23)),
    # Actividad "Respuesta Recibida (Aceptaci√≥n/Reserva 3¬™ Adj.)" (Original ID 20) -> Nuevo ID 19
    19: (datetime(2023, 1, 25), datetime(2023, 1, 30)),
    # Actividad "Respuesta Recibida (Renuncia 3¬™ Adj.)" (Original ID 21) -> Nuevo ID 20
    20: (datetime(2023, 1, 25), datetime(2023, 1, 30)),
}

# ---- Funciones Auxiliares ----
def generar_hora_realista():
    """Generamos una hora del d√≠a, priorizando 08:00-23:59 con excepciones raras."""
    prob_horas_normales = 0.95 # Establecemos 95% de probabilidad para horas "normales"

    if random.random() < prob_horas_normales:
        # Seleccionamos horas normales (08:00 - 23:59)
        hora = random.randint(8, 23)
    else:
        # Ocasionalmente usamos horas raras (00:00 - 07:59)
        hora = random.randint(0, 7)
    
    minuto = random.randint(0, 59)
    segundo = random.randint(0, 59)
    return time(hora, minuto, segundo)

def generar_timestamp_en_plazo(inicio_plazo, fin_plazo, fecha_evento_anterior):
    """Generamos un timestamp dentro de un plazo con picos al inicio/final."""
    # Nos aseguramos de que las fechas son solo date para el c√°lculo de d√≠as
    inicio_plazo_dt = inicio_plazo.date()
    fin_plazo_dt = fin_plazo.date()
    fecha_evento_anterior_dt = fecha_evento_anterior.date()

    # Establecemos que el inicio efectivo no puede ser anterior al evento previo
    inicio_efectivo_dt = max(inicio_plazo_dt, fecha_evento_anterior_dt)

    # Si el inicio efectivo ya supera el fin del plazo, devolvemos fin_plazo como fallback
    if inicio_efectivo_dt > fin_plazo_dt:
        # A√±adimos un tiempo aleatorio realista al d√≠a final
        hora_aleatoria = generar_hora_realista()
        return datetime.combine(fin_plazo_dt, hora_aleatoria)

    # Calculamos d√≠as disponibles
    dias_disponibles = (fin_plazo_dt - inicio_efectivo_dt).days + 1
    fechas_posibles = [inicio_efectivo_dt + timedelta(days=i) for i in range(dias_disponibles)]

    pesos = []
    peso_pico = 5 # Asignamos mayor peso para los d√≠as pico
    peso_normal = 1 # Peso normal para el resto

    if dias_disponibles <= 4: # Si el plazo es muy corto, usamos peso uniforme
        pesos = [peso_normal] * dias_disponibles
    else:
        for i in range(dias_disponibles):
            if i < 2 or i >= dias_disponibles - 2: # Primeros 2 d√≠as o √∫ltimos 2 d√≠as
                pesos.append(peso_pico)
            else:
                pesos.append(peso_normal)

    # Seleccionamos fecha basada en pesos
    fecha_seleccionada = random.choices(fechas_posibles, weights=pesos, k=1)[0]

    # Generamos hora realista
    hora_aleatoria = generar_hora_realista()
    timestamp_final = datetime.combine(fecha_seleccionada, hora_aleatoria)

    # Nos aseguramos de que el timestamp final no es anterior al evento anterior + 1 segundo
    timestamp_minimo = fecha_evento_anterior + timedelta(seconds=1)
    timestamp_final = max(timestamp_final, timestamp_minimo)

    return timestamp_final

# ---- Funciones para generar datos ----

def generar_destinos(num_destinos):
    if USE_LLM:
        print("üîÑ Obteniendo universidades y pa√≠ses desde el LLM...")
        universidades_con_pais = get_universities(num_destinos) # [(nombre, pais), ...]
        print(f"‚úÖ LLM gener√≥ {len(universidades_con_pais)} universidades.")
    else:
        # Mantenemos la generaci√≥n gen√©rica si no se usa LLM
        paises_fallback = ["Italia", "Alemania", "Francia", "Polonia", "Portugal", "Pa√≠ses Bajos", "Suecia", "Noruega", "Austria", "Suiza", "Dinamarca"]
        universidades_con_pais = [(f"Universidad de Ciudad {i}", random.choice(paises_fallback)) for i in range(1, num_destinos + 1)]

    # Ya no necesitamos ponderaci√≥n de pa√≠ses aqu√≠, ya que viene del LLM (o fallback)
    # paises_ponderados = { ... }
    # lista_paises = list(paises_ponderados.keys())
    # pesos_paises = list(paises_ponderados.values())

    destinos = []
    # Iteramos sobre las universidades *realmente generadas*
    for i, (nombre, pais) in enumerate(universidades_con_pais, start=1):
        # Usamos nombre y pa√≠s directamente de la enumeraci√≥n
        # 'i' ya es el ID basado en 1

        cancelado_bool = random.random() < 0.05 # ~5% de destinos cancelados
        cancelado = "S√≠" if cancelado_bool else "No"
        
        # CORRECCI√ìN: Destinos cancelados tienen 0 plazas desde el inicio
        if cancelado_bool:
            plazas = 0  # Destinos cancelados no tienen plazas disponibles
        else:
            plazas = random.randint(1, 5)  # Destinos activos tienen 1-5 plazas
        
        # Establecemos fecha de cancelaci√≥n ANTES del listado provisional (si est√° cancelado)
        fecha_cancelacion = ""
        if cancelado_bool:
            inicio_solicitudes = datetime(2022, 11, 2)
            pub_provisional = datetime(2022, 12, 12)
            delta_cancelacion = pub_provisional - inicio_solicitudes
            # Nos aseguramos de que el rango para randint es v√°lido
            if delta_cancelacion.days > 16:
                dias_random_cancelacion = random.randint(15, delta_cancelacion.days - 1)
                fecha_cancelacion_dt = inicio_solicitudes + timedelta(days=dias_random_cancelacion)
                fecha_cancelacion = fecha_cancelacion_dt.strftime('%Y-%m-%d')
            else: # Si el periodo es muy corto, cancelamos en un d√≠a intermedio
                fecha_cancelacion_dt = inicio_solicitudes + timedelta(days=delta_cancelacion.days // 2)
                fecha_cancelacion = fecha_cancelacion_dt.strftime('%Y-%m-%d')
            
        # --- A√±adimos columna RequiereIdioma ---
        requiere_idioma = random.random() < 0.65 # Establecemos que aproximadamente 65% requieren idioma
        
        destinos.append([i, nombre, pais, plazas, cancelado, fecha_cancelacion, requiere_idioma])
    
    # Mostramos advertencia si el n√∫mero generado es menor que el solicitado
    if len(universidades_con_pais) < num_destinos:
        print(f"‚ö†Ô∏è Advertencia: Se solicitaron {num_destinos} destinos, pero solo se generaron {len(universidades_con_pais)}. Usaremos solo los generados.")
        
    return pd.DataFrame(
        destinos,
        columns=[
            "DestinoID", "NombreDestino", "Pa√≠s", "N√∫meroPlazas",
            "Cancelado", "FechaCancelaci√≥n", "RequiereIdioma"
        ]
    )

def generar_estudiantes(num_estudiantes, destinos_df):
    estudiantes = []

    # Ponderamos los grados para que algunos sean m√°s frecuentes
    grados_ponderados = {
        "GII - Ingenier√≠a del Software": 40,
        "GII - Ingenier√≠a de Computadores": 25,
        "GII - Tecnolog√≠as Inform√°ticas": 20,
        "GII - Ingenier√≠a de la Salud": 15
    }
    lista_grados = list(grados_ponderados.keys())
    pesos_grados = list(grados_ponderados.values())
    estados_finales = ["Aceptado", "Renuncia", "No asignado", "Excluido"]
    pesos_estados = [70, 15, 10, 5] # Tambi√©n ponderamos los estados finales

    for i in range(1, num_estudiantes + 1):
        # Elegimos grado seg√∫n la ponderaci√≥n
        grado = random.choices(lista_grados, weights=pesos_grados, k=1)[0]
        sexo = random.choice(["M", "F"])
        expediente = round(random.uniform(5.0, 10.0), 1)
        # Establecemos fecha de solicitud dentro del plazo de INSCRIPCI√ìN (Actividad 4)
        fecha_solicitud_dt = generar_timestamp_en_plazo(
            PLAZOS[4][0], PLAZOS[4][1], PLAZOS[4][0] - timedelta(days=1)
        )
        fecha_solicitud = fecha_solicitud_dt.strftime('%Y-%m-%d')
        destino_solicitado = random.choice(destinos_df["DestinoID"].tolist())

        # --- L√≥gica Destino Asignado y Estado Final (Mejorada para coherencia) ---
        estado_final = random.choices(estados_finales, weights=pesos_estados, k=1)[0]
        destino_asignado = np.nan # Por defecto

        # NOTA: El estado final ser√° recalculado desde gesti√≥n de plazas, pero necesitamos una asignaci√≥n inicial
        # para generar el EventLog coherentemente

        if estado_final == "Aceptado":
            # M√°s probable obtener el solicitado, pero posible obtener otro
            if random.random() < 0.8: # 80% de prob. de obtener el solicitado si es aceptado
                destino_asignado = destino_solicitado
            else:
                posibles_alternativos = destinos_df[destinos_df["DestinoID"] != destino_solicitado]["DestinoID"].tolist()
                if posibles_alternativos:
                    destino_asignado = random.choice(posibles_alternativos)
                else: # Si solo hab√≠a un destino, se asigna ese
                    destino_asignado = destino_solicitado
            # Si por alguna raz√≥n qued√≥ NaN, forzar el solicitado
            if pd.isna(destino_asignado):
                destino_asignado = destino_solicitado

        elif estado_final == "Renuncia":
            # Si renuncia, usualmente tuvo una asignaci√≥n (podr√≠a ser la solicitada u otra)
             if random.random() < 0.7: # 70% prob. que fuera el solicitado al que renuncia
                 destino_asignado = destino_solicitado
             else:
                posibles_alternativos = destinos_df[destinos_df["DestinoID"] != destino_solicitado]["DestinoID"].tolist()
                if posibles_alternativos:
                    destino_asignado = random.choice(posibles_alternativos)
                else:
                    destino_asignado = destino_solicitado
             # Mantenemos el DestinoAsignado aunque renuncie, para el hist√≥rico

        # Para 'No asignado' o 'Excluido', destino_asignado permanece np.nan (definido al inicio)

        estudiantes.append([i, grado, sexo, expediente, fecha_solicitud, destino_solicitado, destino_asignado, estado_final])
    return pd.DataFrame(estudiantes, columns=["EstudianteID", "Grado", "Sexo", "Expediente", "FechaSolicitud", "DestinoSolicitado", "DestinoAsignado", "EstadoFinal"])

def generar_actividades():
    # Los IDs se reajustan para empezar en 1. El OrdenSecuencial tambi√©n se ajusta.
    actividades = [
        # Fase Inicial / Convalidaci√≥n Idioma (IDs 1-3, Orden 1-2)
        (1, "Solicitud Convalidaci√≥n Idioma Recibida", "Fase Inicial", "Autom√°tica", "Instituto de Idiomas", 1),
        (2, "Resoluci√≥n Convalidaci√≥n Idioma (Rechazada)", "Fase Inicial", "Autom√°tica", "Instituto de Idiomas", 2),
        (3, "Resoluci√≥n Convalidaci√≥n Idioma (Aceptada)", "Fase Inicial", "Autom√°tica", "Instituto de Idiomas", 2),

        # Inscripci√≥n y Listado Provisional (IDs 4-6, Orden 3-5)
        (4, "Inscripci√≥n Programa Erasmus Registrada", "Inscripci√≥n", "Manual", "Estudiante", 3),
        (5, "C√°lculo Notas Participantes Realizado", "Adjudicaci√≥n Provisional", "Autom√°tica", "SEVIUS", 4),
        (6, "Publicaci√≥n Listado Provisional", "Adjudicaci√≥n Provisional", "Autom√°tica", "SEVIUS", 5),

        # Alegaciones (IDs 7-9, Orden 6-8)
        (7, "Alegaci√≥n Presentada", "Alegaciones", "Manual", "Estudiante", 6),
        (8, "Alegaci√≥n Recibida", "Alegaciones", "Autom√°tica", "SEVIUS", 7),
        (9, "Resoluci√≥n Alegaci√≥n Emitida", "Alegaciones", "Autom√°tica", "SEVIUS", 8),

        # --- 1¬™ Adjudicaci√≥n y Respuesta (IDs 10-13, Orden 9-11) ---
        (10, "Publicaci√≥n 1¬™ Adjudicaci√≥n", "Adjudicaciones", "Autom√°tica", "SEVIUS", 9),
        (11, "Respuesta Recibida (Aceptaci√≥n/Reserva 1¬™ Adj.)", "Adjudicaciones", "Manual", "Estudiante", 10),
        (12, "Respuesta Recibida (Renuncia 1¬™ Adj.)", "Adjudicaciones", "Manual", "Estudiante", 10),
        (13, "Actualizaci√≥n Orden Preferencias (Post-1¬™ Adj.)", "Adjudicaciones", "Autom√°tica", "SEVIUS", 11),

        # --- 2¬™ Adjudicaci√≥n y Respuesta (IDs 14-17, Orden 12-14) ---
        (14, "Publicaci√≥n 2¬™ Adjudicaci√≥n", "Adjudicaciones", "Autom√°tica", "SEVIUS", 12),
        (15, "Respuesta Recibida (Aceptaci√≥n/Reserva 2¬™ Adj.)", "Adjudicaciones", "Manual", "Estudiante", 13),
        (16, "Respuesta Recibida (Renuncia 2¬™ Adj.)", "Adjudicaciones", "Manual", "Estudiante", 13),
        (17, "Actualizaci√≥n Orden Preferencias (Post-2¬™ Adj.)", "Adjudicaciones", "Autom√°tica", "SEVIUS", 14),

        # --- 3¬™ Adjudicaci√≥n y Respuesta (IDs 18-21, Orden 15-17) ---
        (18, "Publicaci√≥n 3¬™ Adjudicaci√≥n", "Adjudicaciones", "Autom√°tica", "SEVIUS", 15),
        (19, "Respuesta Recibida (Aceptaci√≥n/Reserva 3¬™ Adj.)", "Adjudicaciones", "Manual", "Estudiante", 16),
        (20, "Respuesta Recibida (Renuncia 3¬™ Adj.)", "Adjudicaciones", "Manual", "Estudiante", 16),
        (21, "Actualizaci√≥n Orden Preferencias (Post-3¬™ Adj.)", "Adjudicaciones", "Autom√°tica", "SEVIUS", 17),

        # Listado Definitivo (ID 22, Orden 18)
        (22, "Publicaci√≥n Listado Definitivo", "Adjudicaci√≥n Final", "Autom√°tica", "SEVIUS", 18),

        # Learning Agreement (IDs 23-30, Orden 19-24)
        (23, "Env√≠o LA a Responsable Destino", "Learning Agreement", "Manual", "Estudiante", 19),
        (24, "LA Recibido por Responsable", "Learning Agreement", "Autom√°tica", "Responsable Destino", 20),
        (25, "LA Validado por Responsable", "Learning Agreement", "Manual", "Responsable Destino", 21),
        (26, "LA Rechazado por Responsable", "Learning Agreement", "Manual", "Responsable Destino", 21),
        (27, "Env√≠o LA a Subdirectora RRII", "Learning Agreement", "Manual", "Estudiante", 22),
        (28, "LA Recibido por Subdirectora", "Learning Agreement", "Autom√°tica", "Subdirectora RRII", 23),
        (29, "LA Validado por Subdirectora", "Learning Agreement", "Manual", "Subdirectora RRII", 24),
        (30, "LA Rechazado por Subdirectora", "Learning Agreement", "Manual", "Subdirectora RRII", 24),

        # Formalizaci√≥n y Fin (IDs 31-32, Orden 25-26)
        (31, "Formalizaci√≥n Acuerdo SEVIUS", "Formalizaci√≥n", "Manual", "Estudiante", 25),
        (32, "Proceso Erasmus Finalizado", "Finalizado", "Autom√°tica", "Sistema", 26),

        # Evento de Cancelaci√≥n Administrativa (ID 33, Orden ~9)
        # (Original 34 -> Nuevo 33). El orden 9 indica que puede ocurrir alrededor de las adjudicaciones.
        (33, "Cancelaci√≥n Plaza (Admin)", "Cancelaci√≥n", "Autom√°tica", "SEVIUS", 9)
    ]
    return pd.DataFrame(actividades, columns=["ActividadID", "NombreActividad", "Fase", "TipoActividad", "ActorDefecto", "OrdenSecuencial"])

def generar_eventlog(estudiantes_df, actividades_df, destinos_df, estudiantes_con_alegaciones_ids):
    eventos = []
    actividad_actor_map = dict(zip(actividades_df["ActividadID"], actividades_df["ActorDefecto"]))

    # Obtener IDs y fechas de destinos cancelados tempranamente
    destinos_cancelados_df = destinos_df[destinos_df['Cancelado'] == 'S√≠'].copy()
    # Convertir fecha cancelaci√≥n a datetime si no est√° vac√≠a y es v√°lida
    destinos_cancelados_df['FechaCancelacion_dt'] = pd.to_datetime(destinos_cancelados_df['FechaCancelaci√≥n'], errors='coerce')
    # Filtrar cancelaciones tempranas (antes de 1¬™ adj, ej. antes de 01/01/2023)
    destinos_cancelados_temprano = destinos_cancelados_df.dropna(subset=['FechaCancelacion_dt']).set_index('DestinoID')
    mapa_fechas_cancelacion = destinos_cancelados_temprano['FechaCancelacion_dt'].to_dict()
    ids_destinos_cancelados_temprano = set(mapa_fechas_cancelacion.keys())

    # --- Rutas de actividades (ACTUALIZADAS con IDs renumerados desde 1) ---
    rutas_base = {
        # ESTADO FINAL: ACEPTADO
        "Aceptado": [
            # --- CON IDIOMA (Rutas con 1 y 3, 3 antes de 4) ---
            # Idioma OK (1->3), Sin Alegaci√≥n, Acepta 1¬™, LA OK
            [1, 3, 4, 5, 6, 10, 11, 14, 18, 22, 23, 24, 25, 27, 28, 29, 31, 32],
            # Idioma OK (1->3), Sin Alegaci√≥n, Renuncia 1¬™, Acepta 2¬™, LA OK
            [1, 3, 4, 5, 6, 10, 12, 13, 14, 15, 18, 22, 23, 24, 25, 27, 28, 29, 31, 32],
            # Idioma OK (1->3), Sin Alegaci√≥n, Renuncia 1¬™/2¬™, Acepta 3¬™, LA OK
            [1, 3, 4, 5, 6, 10, 12, 13, 14, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 31, 32],
            # Idioma REINTENTO (1->2->1->3), Sin Alegaci√≥n, Acepta 1¬™, LA OK
            [1, 2, 1, 3, 4, 5, 6, 10, 11, 14, 18, 22, 23, 24, 25, 27, 28, 29, 31, 32],
            
            # --- SIN IDIOMA (Rutas sin 1, 2, 3) ---
            # Sin Idioma, Sin Alegaci√≥n, Acepta 1¬™, LA OK
            [4, 5, 6, 10, 11, 14, 18, 22, 23, 24, 25, 27, 28, 29, 31, 32],
            # Sin Idioma, Sin Alegaci√≥n, Renuncia 1¬™, Acepta 2¬™, LA OK
            [4, 5, 6, 10, 12, 13, 14, 15, 18, 22, 23, 24, 25, 27, 28, 29, 31, 32],
            # Sin Idioma, Sin Alegaci√≥n, Renuncia 1¬™/2¬™, Acepta 3¬™, LA OK
            [4, 5, 6, 10, 12, 13, 14, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 31, 32],
        ],
        # ESTADO FINAL: RENUNCIA
        "Renuncia": [
            # --- CON IDIOMA ---
            # Idioma OK (1->3), Sin Alegaci√≥n, Renuncia en 1¬™
            [1, 3, 4, 5, 6, 10, 12, 13],
            # Idioma OK (1->3), Sin Alegaci√≥n, Acepta 1¬™, Renuncia en 2¬™
            [1, 3, 4, 5, 6, 10, 11, 14, 16, 17],
            # Idioma OK (1->3), Sin Alegaci√≥n, Acepta 1¬™/2¬™, Renuncia en 3¬™
            [1, 3, 4, 5, 6, 10, 11, 14, 15, 18, 20, 21],
            # Idioma REINTENTO OK (1->2->1->3), Sin Alegaci√≥n, Renuncia en 1¬™
            [1, 2, 1, 3, 4, 5, 6, 10, 12, 13],
            
            # --- SIN IDIOMA ---
            # Sin Idioma, Sin Alegaci√≥n, Renuncia en 1¬™
            [4, 5, 6, 10, 12, 13],
            # Sin Idioma, Sin Alegaci√≥n, Acepta 1¬™, Renuncia en 2¬™
            [4, 5, 6, 10, 11, 14, 16, 17],
            # Sin Idioma, Sin Alegaci√≥n, Acepta 1¬™/2¬™, Renuncia en 3¬™
            [4, 5, 6, 10, 11, 14, 15, 18, 20, 21],
        ],
        # ESTADO FINAL: NO ASIGNADO
        "No asignado": [
            # --- CON IDIOMA ---
            # Idioma OK (1->3), Sin Alegaci√≥n, Pasa todas las rondas sin plaza
            [1, 3, 4, 5, 6, 10, 13, 14, 17, 18, 21, 22],
            # Idioma REINTENTO OK (1->2->1->3), Sin Alegaci√≥n, No pasa de provisional
            [1, 2, 1, 3, 4, 5, 6],
            # Idioma REINTENTO FALLIDO (1->2->1->2) -> Equivalente a Excluido
            [1, 2, 1, 2],

            # --- SIN IDIOMA ---
            # Sin Idioma, Sin Alegaci√≥n, Pasa todas las rondas sin plaza
            [4, 5, 6, 10, 13, 14, 17, 18, 21, 22],
            # Sin Idioma, Sin Alegaci√≥n, No pasa de provisional
            [4, 5, 6],
        ],
        # ESTADO FINAL: EXCLUIDO
        "Excluido": [
            # Base: Rechazado en Idioma (primer intento)
            [1, 2],
            # Base: Rechazado en Idioma (segundo intento)
            [1, 2, 1, 2],
            # Base: Sin idioma, excluido por otros motivos (ej. documentaci√≥n)
            [4, 5],
            # Base: Sin idioma, excluido tras provisional
            [4, 5, 6],
        ]
    }

    # --- L√≥gica para generar variaciones de rutas (ACTUALIZADA con IDs renumerados) ---
    rutas_completas_por_estado = {}
    for estado, lista_rutas_base in rutas_base.items():
        variaciones = []
        for ruta_base in lista_rutas_base:
            variaciones.append(ruta_base)
            # A√±adir versi√≥n con Alegaci√≥n si la ruta base llega hasta la fase (contiene ID 6, pub prov)
            # Y si NO ES una ruta corta de exclusi√≥n por idioma ([1,2] o [1,2,1,2])
            if 6 in ruta_base and ruta_base != [1, 2] and ruta_base != [1, 2, 1, 2]:
                try:
                    idx_6 = ruta_base.index(6)
                    # Alegaciones van despu√©s de ID 6 (Pub Prov): IDs 7, 8, 9
                    ruta_con_alegacion = ruta_base[:idx_6+1] + [7, 8, 9] + ruta_base[idx_6+1:]
                    variaciones.append(ruta_con_alegacion)
                except ValueError: 
                    pass
                    
        rutas_unicas = set(tuple(v) for v in variaciones if v)
        rutas_completas_por_estado[estado] = [list(t) for t in rutas_unicas]

    # --- Rutas de Cancelaci√≥n Administrativa (ACTUALIZADAS con IDs renumerados) ---
    # Cancelaci√≥n ID es ahora 33
    rutas_cancelacion = {
        "con_idioma": [1, 3, 4, 5, 6, 10, 33],       # Idioma OK (1->3) -> Cancelaci√≥n post-1¬™Adj (10)
        "sin_idioma": [4, 5, 6, 10, 33],           # Sin Idioma -> Cancelaci√≥n post-1¬™Adj (10)
        "idioma_rechazo": [1, 2, 33],              # Idioma Rechazado (1->2) -> Cancelaci√≥n
        "idioma_reintento_ok": [1, 2, 1, 3, 4, 33] # Reintento OK (1->2->1->3) -> Cancelaci√≥n post-Inscripci√≥n (4)
    }
    # A√±adir rutas de cancelaci√≥n como posibilidad
    for estado in ["Aceptado", "Renuncia", "No asignado"]:
        if estado in rutas_completas_por_estado:
            rutas_completas_por_estado[estado].extend(rutas_cancelacion.values())

    # --- Ruta default (ACTUALIZADA) ---
    # Inscripci√≥n (4), C√°lculo Notas (5), Pub Prov (6)
    rutas_default = [[4, 5, 6]]

    # --- Mezclar patrones LLM (La l√≥gica de mezcla se mantiene) ---
    if USE_LLM:
        print("üîÑ Obteniendo patrones de proceso desde el LLM...")
        try:
            patrones_llm = get_process_patterns(n=20)
            print(f"‚úÖ LLM gener√≥ {len(patrones_llm)} patrones.")
            # Simplificado: A√±adir a todos los estados principales
            for estado in ["Aceptado", "Renuncia", "No asignado"]:
                if estado in rutas_completas_por_estado:
                    rutas_completas_por_estado[estado].extend(patrones_llm)
            rutas_default.extend(patrones_llm)
        except Exception as e:
            print(f"‚ùå Error obteniendo o procesando patrones LLM: {e}")

    # --- Definir fechas fijas para publicaciones --- 
    FECHAS_PUBLICACION = {
        6: datetime(2022, 12, 12, 0, 1, 0), # Pub Provisional (Inicio plazo Alegaciones ID 7)
        10: datetime(2023, 1, 11, 0, 1, 0), # Pub 1¬™ Adj (Inicio plazo Respuesta 1¬™ ID 11)
        14: datetime(2023, 1, 19, 0, 1, 0), # Pub 2¬™ Adj (Inicio plazo Respuesta 2¬™ ID 15)
        18: datetime(2023, 1, 25, 0, 1, 0), # Pub 3¬™ Adj (Inicio plazo Respuesta 3¬™ ID 19)
        22: datetime(2023, 2, 1, 0, 1, 0),  # Pub Definitiva
    }

    for idx, row in estudiantes_df.iterrows():
        estudiante_id = row["EstudianteID"]
        fecha_evento_anterior_base = datetime.strptime(row["FechaSolicitud"], '%Y-%m-%d')
        fecha_evento_anterior = datetime.combine(fecha_evento_anterior_base.date(), generar_hora_realista())
        estado_final = row["EstadoFinal"]
        destino_solicitado = row["DestinoSolicitado"]
        destino_asignado_final = row["DestinoAsignado"]
        
        # Mejorar la l√≥gica de destino para el log
        if not pd.isna(destino_asignado_final):
            id_destino_log = destino_asignado_final
        else:
            # Si no tiene destino asignado, usar el solicitado para el tracking
            id_destino_log = destino_solicitado
        
        # Validaci√≥n adicional
        if pd.isna(id_destino_log): 
            id_destino_log = random.choice(destinos_df["DestinoID"].tolist())

        ruta_seleccionada = None
        fecha_cancelacion_destino = None
        requiere_idioma = False # Valor por defecto

        # --- Obtener si el destino SOLICITADO requiere idioma ---
        try:
            destino_info = destinos_df.loc[destinos_df['DestinoID'] == destino_solicitado].iloc[0]
            requiere_idioma = destino_info['RequiereIdioma']
        except IndexError:
            print(f"‚ö†Ô∏è Advertencia: No se encontr√≥ informaci√≥n del destino {destino_solicitado} para Estudiante {estudiante_id}. Asumiendo que NO requiere idioma.")

        # --- Comprobar si el DESTINO SOLICITADO fue cancelado tempranamente (ACTUALIZADO) ---
        if destino_solicitado in ids_destinos_cancelados_temprano:
            print(f"‚ÑπÔ∏è Estudiante {estudiante_id}: Destino solicitado {destino_solicitado} cancelado tempranamente.")
            fecha_cancelacion_destino = mapa_fechas_cancelacion[destino_solicitado]
            # Seleccionar ruta de cancelaci√≥n basada en si requer√≠a idioma
            if requiere_idioma:
                # ¬øTuvo tiempo de ser rechazado antes de cancelar?
                # Simplificaci√≥n: Si cancela pronto, asumimos rechazo. Si tarda, asumimos OK.
                pub_provisional = datetime(2022, 12, 12) # Fecha ref. para "tarde"
                if fecha_cancelacion_destino < pub_provisional:
                    ruta_seleccionada = rutas_cancelacion["idioma_rechazo"] # [1, 2, 33]
                else:
                    # Podr√≠a ser ok o reintento ok, elegimos aleatoriamente
                    ruta_seleccionada = random.choice([
                        rutas_cancelacion["con_idioma"], # [1, 3, 4, 5, 6, 10, 33]
                        rutas_cancelacion["idioma_reintento_ok"] #[1, 2, 1, 3, 4, 33]
                    ])
            else:
                 ruta_seleccionada = rutas_cancelacion["sin_idioma"] # [4, 5, 6, 10, 33]
            
            # estado_final = "No asignado" # Opcional: forzar estado

        # --- Si no hay cancelaci√≥n temprana, proceder con la l√≥gica normal (ACTUALIZADA) --- 
        if ruta_seleccionada is None:
            # 1. Obtener todas las rutas posibles para el estado final del estudiante
            lista_rutas_estado = rutas_completas_por_estado.get(estado_final, rutas_default)
            if not lista_rutas_estado: lista_rutas_estado = rutas_default # Fallback

            # 2. Filtrar por requerimiento de idioma
            rutas_filtradas_idioma = []
            if requiere_idioma:
                # Seleccionar rutas que S√ç contienen pasos de idioma (empiezan con 1 o tienen [..., 1, 2, ...])
                rutas_filtradas_idioma = [r for r in lista_rutas_estado if r and (r[0] == 1 or (1 in r and 2 in r))]
            else:
                # Seleccionar rutas que NO contienen pasos de idioma (1, 2, 3)
                rutas_filtradas_idioma = [r for r in lista_rutas_estado if r and not any(act_id in r for act_id in [1, 2, 3])]

            # 3. Filtrar por alegaciones
            tiene_alegacion = estudiante_id in estudiantes_con_alegaciones_ids
            rutas_filtradas_final = []
            if tiene_alegacion:
                # Solo rutas (ya filtradas por idioma) que contengan la secuencia de alegaci√≥n (7, 8, 9)
                rutas_filtradas_final = [r for r in rutas_filtradas_idioma if 7 in r and 8 in r and 9 in r]
            else:
                # Solo rutas (ya filtradas por idioma) que NO contengan la secuencia de alegaci√≥n
                rutas_filtradas_final = [r for r in rutas_filtradas_idioma if not (7 in r and 8 in r and 9 in r)]

            # --- Selecci√≥n de Ruta Final (con fallbacks mejorados) ---
            if rutas_filtradas_final:
                ruta_seleccionada = random.choice(rutas_filtradas_final)
            elif rutas_filtradas_idioma: # Fallback 1: No hab√≠a rutas con/sin alegaci√≥n, pero s√≠ para el idioma
                 print(f"‚ö†Ô∏è Advertencia: No se encontraron rutas filtradas por alegaci√≥n ({tiene_alegacion}) para Estudiante {estudiante_id} (Estado: {estado_final}, Idioma: {requiere_idioma}). Seleccionando ruta compatible con idioma.")
                 ruta_seleccionada = random.choice(rutas_filtradas_idioma)
            elif lista_rutas_estado: # Fallback 2: No hab√≠a rutas para el idioma, usar las del estado
                 print(f"‚ö†Ô∏è Advertencia: No se encontraron rutas filtradas por idioma ({requiere_idioma}) para Estudiante {estudiante_id} (Estado: {estado_final}). Seleccionando de la lista completa del estado.")
                 ruta_seleccionada = random.choice(lista_rutas_estado)
            else: # Fallback 3: Usar default global
                 print(f"üÜò Error Cr√≠tico: No hay rutas disponibles para Estudiante {estudiante_id}. Usando ruta default global.")
                 ruta_seleccionada = random.choice(rutas_default)

        # ---- Fin Selecci√≥n Ruta ----
        ruta = ruta_seleccionada

        # --- Bucle principal de eventos --- 
        for actividad_id in ruta:
            # --- L√≥gica Timestamp (ACTUALIZADA para publicaciones fijas) ---
            fecha_actual = None # Inicializar

            # 1. Evento de Cancelaci√≥n Admin (ID 33) con fecha conocida
            if actividad_id == 33 and fecha_cancelacion_destino is not None:
                fecha_minima = fecha_evento_anterior + timedelta(seconds=1)
                fecha_actual = max(fecha_cancelacion_destino, fecha_minima)
                fecha_actual = datetime.combine(fecha_actual.date(), generar_hora_realista())
                fecha_actual = max(fecha_actual, fecha_minima)
            
            # 2. Eventos de Publicaci√≥n Fija (IDs 6, 10, 14, 18, 22)
            elif actividad_id in FECHAS_PUBLICACION:
                fecha_fija = FECHAS_PUBLICACION[actividad_id]
                fecha_minima = fecha_evento_anterior + timedelta(seconds=1)
                # Asegurar que la fecha fija es posterior al evento anterior
                fecha_actual = max(fecha_fija, fecha_minima)
                # Si la fecha fija tuvo que adelantarse, al menos mantener la hora 00:01
                if fecha_actual > fecha_fija:
                    # Comprobar si al menos es el mismo d√≠a
                    if fecha_actual.date() == fecha_fija.date():
                         # Mantener la hora 00:01 si es posible, sino la hora m√≠nima
                         hora_minima = fecha_minima.time()
                         hora_fija = time(0, 1, 0)
                         fecha_actual = datetime.combine(fecha_actual.date(), max(hora_fija, hora_minima))
                    # Si tuvo que cambiar el d√≠a, ya no podemos forzar la hora 00:01
                    # y se queda con el timestamp m√≠nimo (fecha_actual ya tiene ese valor)
                
            # 3. Eventos con Plazo definido en PLAZOS
            elif actividad_id in PLAZOS:
                 inicio_plazo, fin_plazo = PLAZOS[actividad_id]
                 fecha_actual = generar_timestamp_en_plazo(inicio_plazo, fin_plazo, fecha_evento_anterior)
            
            # 4. Resto de eventos (sin plazo fijo ni publicaci√≥n fija)
            else:
                # L√≥gica de delta aleatorio (sin cambios)
                delta_dias = random.randint(0, 2)
                delta_horas = random.randint(1, 12)
                delta_total = timedelta(days=delta_dias, hours=delta_horas, minutes=random.randint(0,59))
                fecha_propuesta = fecha_evento_anterior + delta_total
                
                # Heur√≠stica para evitar adelantar plazos (sin cambios)
                proximo_plazo_inicio = None
                try:
                    indice_actual = ruta.index(actividad_id)
                    for act_futura_id in ruta[indice_actual+1:]:
                        if act_futura_id in PLAZOS:
                            proximo_plazo_inicio = PLAZOS[act_futura_id][0]
                            break
                except ValueError:
                    pass 
                if proximo_plazo_inicio and fecha_propuesta >= proximo_plazo_inicio:
                    fecha_actual = fecha_evento_anterior + timedelta(hours=random.randint(1,3))
                    if fecha_actual >= proximo_plazo_inicio:
                       fecha_actual = proximo_plazo_inicio - timedelta(minutes=random.randint(1,30))
                else:
                    fecha_actual = fecha_propuesta

            # Actualizar fecha evento anterior para el siguiente ciclo
            fecha_evento_anterior = fecha_actual
            # --- Fin L√≥gica Timestamp ---            
            
            actor = actividad_actor_map.get(actividad_id, "Desconocido")
            detalle = actividades_df.loc[actividades_df['ActividadID'] == actividad_id, 'NombreActividad'].iloc[0] # Detalle base
            
            # --- Actualizar IDs en la generaci√≥n de detalles espec√≠ficos --- 
            # IDs originales eran 12, 16, 20. Nuevos IDs son 11, 15, 19.
            if actividad_id in [11, 15, 19]: 
                ronda_adj = (actividad_id - 11) // 4 + 1
                detalle = f"Respuesta {ronda_adj}¬™ Adj: Aceptaci√≥n/Reserva"
            # IDs originales eran 13, 17, 21. Nuevos IDs son 12, 16, 20.
            elif actividad_id in [12, 16, 20]: 
                ronda_adj = (actividad_id - 12) // 4 + 1
                detalle = f"Respuesta {ronda_adj}¬™ Adj: Renuncia"
            # ID original era 34. Nuevo ID es 33.
            elif actividad_id == 33: 
                detalle = "Destino Solicitado Cancelado (Admin)"

            eventos.append([
                estudiante_id,
                actividad_id,
                fecha_actual.strftime('%Y-%m-%d %H:%M:%S'),
                int(id_destino_log),
                detalle,
                actor
            ])
            # --- Fin resto del bucle ---

    eventos_df = pd.DataFrame(eventos, columns=["EstudianteID", "ActividadID", "Timestamp", "DestinoID", "Detalle", "Actor"])
    eventos_df.insert(0, "EventID", range(1, len(eventos_df) + 1))
    return eventos_df

def generar_alegaciones(estudiantes_df):
    """
    Genera alegaciones con fechas que ser√°n coordinadas posteriormente con el EventLog.
    NOTA: Las fechas se generan inicialmente de forma aproximada y se sincronizar√°n 
    despu√©s con las fechas reales del EventLog.
    """
    motivos = get_alegation_motives(20) if USE_LLM else [
        "Error en nota media", "Cambio de destino no solicitado", "Fallo administrativo", 
        "Revisi√≥n de expediente", "Problemas m√©dicos", "No contabilizaci√≥n de cr√©ditos",
        "Error en fecha l√≠mite de entrega", "Destino cancelado sin aviso", "Falta de actualizaci√≥n de notas",
        "Confusi√≥n en adjudicaci√≥n de plaza", "Problemas t√©cnicos en la plataforma", 
        "Revisi√≥n de expediente Erasmus anterior", "Actualizaci√≥n posterior de expediente acad√©mico",
        "Error en selecci√≥n de prioridades", "Equivalencia incorrecta de estudios",
        "Problemas familiares graves", "Motivos laborales inesperados", 
        "Crisis sanitaria no prevista", "Nueva acreditaci√≥n acad√©mica", "Error humano de revisi√≥n"
    ]

    estudiantes_con_alegacion = estudiantes_df.sample(frac=PCT_ESTUDIANTES_CON_ALEGACIONES)
    alegaciones = []

    for idx, row in estudiantes_con_alegacion.iterrows():
        estudiante_id = row["EstudianteID"]
        fecha_solicitud = datetime.strptime(row["FechaSolicitud"], '%Y-%m-%d')
        
        # FECHAS TEMPORALES - Se sincronizar√°n con EventLog despu√©s
        fecha_alegacion = fecha_solicitud + timedelta(days=random.randint(20, 50))

        motivo = random.choice(motivos)
        resultado = random.choice(["Aceptada", "Rechazada"])
        fecha_resolucion = fecha_alegacion + timedelta(days=random.randint(7, 20))

        if resultado == "Aceptada":
            accion = random.choice(["Reasignaci√≥n", "Confirmaci√≥n destino inicial"])
        else:
            accion = "No cambio"

        alegaciones.append([
            idx + 1,  # AlegacionID √∫nico
            estudiante_id,
            fecha_alegacion.strftime('%Y-%m-%d'),
            motivo,
            resultado,
            fecha_resolucion.strftime('%Y-%m-%d'),
            accion
        ])

    alegaciones_df = pd.DataFrame(alegaciones, columns=[
        "AlegacionID", "EstudianteID", "FechaAlegacion", "MotivoAlegacion", 
        "ResultadoAlegacion", "FechaResolucion", "AccionTrasResolucion"
    ])
    
    # Obtenemos el conjunto de IDs de estudiantes con alegaciones
    estudiantes_con_alegaciones_ids = set(alegaciones_df["EstudianteID"].unique())
    
    # Devolvemos tanto el DataFrame como el conjunto de IDs
    return alegaciones_df, estudiantes_con_alegaciones_ids

# FUNCI√ìN ELIMINADA: generar_historico_adjudicaciones
# Esta funci√≥n ha sido reemplazada por extraer_historico_desde_eventlog 
# para garantizar coherencia total con el EventLog

def sincronizar_fechas_historico_eventlog(historico_df, eventlog_df):
    """
    Sincroniza las fechas del hist√≥rico con las fechas reales del EventLog.
    """
    print("üïê Sincronizando fechas entre Hist√≥rico y EventLog...")
    
    # Mapeo de rondas a actividades de publicaci√≥n
    ronda_a_actividad = {
        "1¬™ Adjudicaci√≥n": 10,
        "2¬™ Adjudicaci√≥n": 14,
        "3¬™ Adjudicaci√≥n": 18,
        "Adjudicaci√≥n Final": 22
    }
    
    historico_sincronizado = historico_df.copy()
    
    for idx, row in historico_sincronizado.iterrows():
        estudiante_id = row['EstudianteID']
        ronda = row['Ronda']
        
        # Buscar la actividad correspondiente
        if ronda in ronda_a_actividad:
            actividad_id = ronda_a_actividad[ronda]
            
            # Buscar el evento correspondiente en el EventLog
            evento_publicacion = eventlog_df[
                (eventlog_df['EstudianteID'] == estudiante_id) & 
                (eventlog_df['ActividadID'] == actividad_id)
            ]
            
            if len(evento_publicacion) > 0:
                # Usar la fecha del EventLog
                fecha_real = pd.to_datetime(evento_publicacion.iloc[0]['Timestamp']).strftime('%Y-%m-%d')
                historico_sincronizado.at[idx, 'FechaAsignacion'] = fecha_real
    
    return historico_sincronizado

def sincronizar_alegaciones_eventlog(alegaciones_df, eventlog_df):
    """
    Sincroniza las fechas de alegaciones con las fechas reales del EventLog.
    """
    print("üïê Sincronizando fechas de alegaciones con EventLog...")
    
    alegaciones_sincronizadas = alegaciones_df.copy()
    
    for idx, row in alegaciones_sincronizadas.iterrows():
        estudiante_id = row['EstudianteID']
        
        # Buscar eventos de alegaci√≥n del estudiante en el EventLog
        eventos_alegacion = eventlog_df[
            (eventlog_df['EstudianteID'] == estudiante_id) & 
            (eventlog_df['ActividadID'].isin([7, 8, 9]))  # Alegaci√≥n Presentada, Recibida, Resoluci√≥n
        ].sort_values('Timestamp')
        
        if len(eventos_alegacion) > 0:
            # Usar fecha de presentaci√≥n (ActividadID 7) si existe
            evento_presentacion = eventos_alegacion[eventos_alegacion['ActividadID'] == 7]
            if len(evento_presentacion) > 0:
                fecha_real_alegacion = pd.to_datetime(evento_presentacion.iloc[0]['Timestamp']).strftime('%Y-%m-%d')
                alegaciones_sincronizadas.at[idx, 'FechaAlegacion'] = fecha_real_alegacion
            
            # Usar fecha de resoluci√≥n (ActividadID 9) si existe
            evento_resolucion = eventos_alegacion[eventos_alegacion['ActividadID'] == 9]
            if len(evento_resolucion) > 0:
                fecha_real_resolucion = pd.to_datetime(evento_resolucion.iloc[0]['Timestamp']).strftime('%Y-%m-%d')
                alegaciones_sincronizadas.at[idx, 'FechaResolucion'] = fecha_real_resolucion
    
    return alegaciones_sincronizadas

# ---- Funciones de Coordinaci√≥n y Extracci√≥n ----

# FUNCI√ìN ELIMINADA: calcular_estado_final_desde_eventlog
# Esta funci√≥n no se utiliza en el flujo principal.
# Los estados finales se actualizan desde la gesti√≥n de plazas para mantener coherencia.

def extraer_historico_desde_gestion_plazas(gestion_plazas, eventlog_df):
    """
    Extrae el hist√≥rico de adjudicaciones desde la gesti√≥n de plazas para garantizar coherencia total.
    """
    historico = []
    asignacion_id_counter = 1
    
    # Mapeo de rondas a actividades de publicaci√≥n para obtener fechas
    ronda_a_actividad = {
        "1¬™ Adjudicaci√≥n": 10,
        "2¬™ Adjudicaci√≥n": 14,
        "3¬™ Adjudicaci√≥n": 18,
        "Adjudicaci√≥n Final": 22
    }
    
    # Procesar cada destino y ronda
    for destino_id in gestion_plazas['asignaciones_titulares']:
        for ronda in ["1¬™ Adjudicaci√≥n", "2¬™ Adjudicaci√≥n", "3¬™ Adjudicaci√≥n", "Adjudicaci√≥n Final"]:
            # Obtener fecha de la publicaci√≥n desde el EventLog
            actividad_id = ronda_a_actividad[ronda]
            eventos_publicacion = eventlog_df[
                (eventlog_df['ActividadID'] == actividad_id) & 
                (eventlog_df['DestinoID'] == destino_id)
            ]
            
            if len(eventos_publicacion) > 0:
                fecha_publicacion = pd.to_datetime(eventos_publicacion.iloc[0]['Timestamp']).strftime('%Y-%m-%d')
            else:
                # Fallback: usar fechas fijas conocidas
                fechas_fallback = {
                    "1¬™ Adjudicaci√≥n": "2023-01-11",
                    "2¬™ Adjudicaci√≥n": "2023-01-19", 
                    "3¬™ Adjudicaci√≥n": "2023-01-25",
                    "Adjudicaci√≥n Final": "2023-02-01"
                }
                fecha_publicacion = fechas_fallback[ronda]
            
            # Registrar titulares
            titulares = gestion_plazas['asignaciones_titulares'][destino_id][ronda]
            for estudiante_id in titulares:
                historico.append([
                    asignacion_id_counter,
                    estudiante_id,
                    destino_id,
                    fecha_publicacion,
                    ronda,
                    "Titular"
                ])
                asignacion_id_counter += 1
            
            # Registrar suplentes (para an√°lisis completo)
            suplentes = gestion_plazas['asignaciones_suplentes'][destino_id][ronda]
            for estudiante_id in suplentes:
                historico.append([
                    asignacion_id_counter,
                    estudiante_id,
                    destino_id,
                    fecha_publicacion,
                    ronda,
                    "Suplente"
                ])
                asignacion_id_counter += 1

    return pd.DataFrame(
        historico,
        columns=["AsignacionID", "EstudianteID", "DestinoID", "FechaAsignacion", "Ronda", "EstadoEnRonda"]
    )

def validar_coherencia_datos(estudiantes_df, eventlog_df, historico_df):
    """
    Valida la coherencia entre las tres fuentes de datos principales.
    ACTUALIZADA: Se enfoca en coherencia estructural, no en estados vs EventLog
    (ya que los estados se actualizan desde gesti√≥n de plazas).
    """
    inconsistencias = []
    
    print("üîç Validando coherencia de datos...")
    
    for _, estudiante in estudiantes_df.iterrows():
        estudiante_id = estudiante['EstudianteID']
        estado_final = estudiante['EstadoFinal']
        destino_asignado = estudiante['DestinoAsignado']
        destino_solicitado = estudiante['DestinoSolicitado']
        
        # Obtener eventos del estudiante
        eventos = eventlog_df[eventlog_df['EstudianteID'] == estudiante_id].sort_values('Timestamp')
        historico_est = historico_df[historico_df['EstudianteID'] == estudiante_id]
        
        if len(eventos) == 0:
            inconsistencias.append(f"Estudiante {estudiante_id}: Sin eventos en EventLog")
            continue
        
        # Validaci√≥n 1: Coherencia b√°sica de destinos (RELAJADA - diferencias son normales en Erasmus)
        # Solo reportar si es una diferencia muy extra√±a (ej. destino inexistente)
        # if not pd.isna(destino_asignado) and destino_asignado != destino_solicitado:
        #     inconsistencias.append(f"Estudiante {estudiante_id}: Destino asignado ({destino_asignado}) diferente al solicitado ({destino_solicitado})")
        
        # Validaci√≥n 2: Estados vs destinos asignados
        if estado_final == "Aceptado" and pd.isna(destino_asignado):
            inconsistencias.append(f"Estudiante {estudiante_id}: Estado 'Aceptado' pero sin destino asignado")
        
        if estado_final in ["Renuncia", "No asignado", "Excluido"] and not pd.isna(destino_asignado):
            inconsistencias.append(f"Estudiante {estudiante_id}: Estado '{estado_final}' pero tiene destino asignado ({destino_asignado})")
        
        # Validaci√≥n 3: Destino asignado vs hist√≥rico
        if not pd.isna(destino_asignado) and len(historico_est) > 0:
            destinos_historico = set(historico_est['DestinoID'].tolist())
            if destino_asignado not in destinos_historico:
                inconsistencias.append(f"Estudiante {estudiante_id}: Destino asignado {destino_asignado} no aparece en hist√≥rico")
        
        # Validaci√≥n 4: Fechas de adjudicaci√≥n vs eventos (sincronizaci√≥n)
        for _, adj in historico_est.iterrows():
            fecha_adj = pd.to_datetime(adj['FechaAsignacion'])
            ronda = adj['Ronda']
            
            # Buscar evento de publicaci√≥n correspondiente
            if "1¬™" in ronda:
                eventos_pub = eventos[eventos['ActividadID'] == 10]
            elif "2¬™" in ronda:
                eventos_pub = eventos[eventos['ActividadID'] == 14]
            elif "3¬™" in ronda:
                eventos_pub = eventos[eventos['ActividadID'] == 18]
            elif "Final" in ronda:
                eventos_pub = eventos[eventos['ActividadID'] == 22]
            else:
                continue
                
            if len(eventos_pub) > 0:
                fecha_evento = pd.to_datetime(eventos_pub.iloc[0]['Timestamp']).date()
                if fecha_adj.date() != fecha_evento:
                    inconsistencias.append(f"Estudiante {estudiante_id}: Fecha adjudicaci√≥n {ronda} no coincide (Hist√≥rico: {fecha_adj.date()}, EventLog: {fecha_evento})")
        
        # Validaci√≥n 5: Estudiantes excluidos no deber√≠an tener hist√≥rico de adjudicaciones
        if estado_final == "Excluido" and len(historico_est) > 0:
            inconsistencias.append(f"Estudiante {estudiante_id}: Estado 'Excluido' pero tiene hist√≥rico de adjudicaciones")
    
    # Mostrar resumen de validaci√≥n
    if inconsistencias:
        print(f"‚ö†Ô∏è Se encontraron {len(inconsistencias)} inconsistencias:")
        for inc in inconsistencias[:10]:  # Mostrar solo las primeras 10
            print(f"   - {inc}")
        if len(inconsistencias) > 10:
            print(f"   ... y {len(inconsistencias) - 10} m√°s.")
    else:
        print("‚úÖ No se encontraron inconsistencias.")
    
    return inconsistencias

def gestionar_plazas_por_destino_y_ronda():
    """
    Gestiona las plazas disponibles por destino en cada ronda de adjudicaci√≥n.
    Retorna un diccionario con el estado de plazas por destino y ronda.
    """
    return {
        'plazas_disponibles': {},  # {destino_id: {ronda: plazas_restantes}}
        'asignaciones_titulares': {},  # {destino_id: {ronda: [estudiante_ids]}}
        'asignaciones_suplentes': {},  # {destino_id: {ronda: [estudiante_ids]}}
        'renuncias': {}  # {destino_id: {ronda: [estudiante_ids_que_renunciaron]}}
    }

def simular_adjudicacion_con_plazas(estudiantes_df, destinos_df):
    """
    Simula el proceso de adjudicaci√≥n considerando el n√∫mero real de plazas disponibles.
    Retorna informaci√≥n detallada de asignaciones por ronda.
    """
    print("üéØ Simulando adjudicaci√≥n con control de plazas...")
    
    # Inicializar gesti√≥n de plazas
    gestion_plazas = gestionar_plazas_por_destino_y_ronda()
    
    # Inicializar plazas disponibles para cada destino
    for _, destino in destinos_df.iterrows():
        destino_id = destino['DestinoID']
        num_plazas = destino['N√∫meroPlazas']
        
        # SIMPLIFICADO: Los destinos cancelados ya tienen N√∫meroPlazas = 0 desde el CSV
        plazas_iniciales = num_plazas
        
        gestion_plazas['plazas_disponibles'][destino_id] = {
            '1¬™ Adjudicaci√≥n': plazas_iniciales,
            '2¬™ Adjudicaci√≥n': plazas_iniciales,
            '3¬™ Adjudicaci√≥n': plazas_iniciales,
            'Adjudicaci√≥n Final': plazas_iniciales
        }
        
        gestion_plazas['asignaciones_titulares'][destino_id] = {
            '1¬™ Adjudicaci√≥n': [],
            '2¬™ Adjudicaci√≥n': [],
            '3¬™ Adjudicaci√≥n': [],
            'Adjudicaci√≥n Final': []
        }
        
        gestion_plazas['asignaciones_suplentes'][destino_id] = {
            '1¬™ Adjudicaci√≥n': [],
            '2¬™ Adjudicaci√≥n': [],
            '3¬™ Adjudicaci√≥n': [],
            'Adjudicaci√≥n Final': []
        }
        
        gestion_plazas['renuncias'][destino_id] = {
            '1¬™ Adjudicaci√≥n': [],
            '2¬™ Adjudicaci√≥n': [],
            '3¬™ Adjudicaci√≥n': [],
            'Adjudicaci√≥n Final': []
        }
    
    # Simular cada ronda de adjudicaci√≥n
    rondas = ['1¬™ Adjudicaci√≥n', '2¬™ Adjudicaci√≥n', '3¬™ Adjudicaci√≥n', 'Adjudicaci√≥n Final']
    
    for ronda in rondas:
        print(f"   üìã Procesando {ronda}...")
        
        # Obtener estudiantes elegibles para esta ronda
        estudiantes_elegibles = []
        for _, estudiante in estudiantes_df.iterrows():
            estudiante_id = estudiante['EstudianteID']
            destino_solicitado = estudiante['DestinoSolicitado']
            estado_final = estudiante['EstadoFinal']
            
            # L√≥gica para determinar si el estudiante participa en esta ronda
            participa = False
            if ronda == '1¬™ Adjudicaci√≥n':
                # Todos los no excluidos participan en 1¬™
                participa = estado_final != 'Excluido'
            elif ronda == '2¬™ Adjudicaci√≥n':
                # Solo los que no fueron asignados como titulares en 1¬™ o renunciaron
                titulares_1ra = gestion_plazas['asignaciones_titulares'][destino_solicitado]['1¬™ Adjudicaci√≥n']
                renuncias_1ra = gestion_plazas['renuncias'][destino_solicitado]['1¬™ Adjudicaci√≥n']
                participa = (estudiante_id not in titulares_1ra or estudiante_id in renuncias_1ra) and estado_final != 'Excluido'
            elif ronda == '3¬™ Adjudicaci√≥n':
                # Solo los que no fueron asignados como titulares en 1¬™/2¬™ o renunciaron
                titulares_1ra = gestion_plazas['asignaciones_titulares'][destino_solicitado]['1¬™ Adjudicaci√≥n']
                titulares_2da = gestion_plazas['asignaciones_titulares'][destino_solicitado]['2¬™ Adjudicaci√≥n']
                renuncias_1ra = gestion_plazas['renuncias'][destino_solicitado]['1¬™ Adjudicaci√≥n']
                renuncias_2da = gestion_plazas['renuncias'][destino_solicitado]['2¬™ Adjudicaci√≥n']
                no_asignado_titular = estudiante_id not in titulares_1ra and estudiante_id not in titulares_2da
                renuncio_antes = estudiante_id in renuncias_1ra or estudiante_id in renuncias_2da
                participa = (no_asignado_titular or renuncio_antes) and estado_final != 'Excluido'
            else:  # Adjudicaci√≥n Final
                # Todos los que llegaron hasta aqu√≠
                participa = estado_final in ['Aceptado', 'No asignado']
            
            if participa:
                estudiantes_elegibles.append({
                    'estudiante_id': estudiante_id,
                    'destino_solicitado': destino_solicitado,
                    'expediente': estudiante['Expediente'],
                    'estado_final': estado_final
                })
        
        # Agrupar por destino y ordenar por expediente (mayor a menor)
        destinos_solicitados = {}
        for est in estudiantes_elegibles:
            destino = est['destino_solicitado']
            if destino not in destinos_solicitados:
                destinos_solicitados[destino] = []
            destinos_solicitados[destino].append(est)
        
        # Procesar cada destino
        for destino_id, candidatos in destinos_solicitados.items():
            # Ordenar candidatos por expediente (mayor nota = mayor prioridad)
            candidatos_ordenados = sorted(candidatos, key=lambda x: x['expediente'], reverse=True)
            
            # Obtener plazas disponibles para este destino en esta ronda
            plazas_disponibles = gestion_plazas['plazas_disponibles'][destino_id][ronda]
            
            # Asignar titulares (hasta el l√≠mite de plazas)
            titulares_asignados = 0
            for candidato in candidatos_ordenados:
                if titulares_asignados < plazas_disponibles:
                    # Asignar como titular
                    gestion_plazas['asignaciones_titulares'][destino_id][ronda].append(candidato['estudiante_id'])
                    titulares_asignados += 1
                else:
                    # Asignar como suplente
                    gestion_plazas['asignaciones_suplentes'][destino_id][ronda].append(candidato['estudiante_id'])
        
        # Simular renuncias en esta ronda (libera plazas para la siguiente)
        for destino_id in gestion_plazas['asignaciones_titulares']:
            titulares_ronda = gestion_plazas['asignaciones_titulares'][destino_id][ronda]
            
            # Simular renuncias (probabilidad basada en el estado final del estudiante)
            for titular_id in titulares_ronda:
                estudiante_info = estudiantes_df[estudiantes_df['EstudianteID'] == titular_id].iloc[0]
                estado_final = estudiante_info['EstadoFinal']
                
                # Probabilidad de renuncia basada en estado final y ronda
                prob_renuncia = 0.0
                if estado_final == 'Renuncia':
                    if ronda == '1¬™ Adjudicaci√≥n':
                        prob_renuncia = 0.4  # 40% renuncia en 1¬™
                    elif ronda == '2¬™ Adjudicaci√≥n':
                        prob_renuncia = 0.3  # 30% renuncia en 2¬™
                    elif ronda == '3¬™ Adjudicaci√≥n':
                        prob_renuncia = 0.3  # 30% renuncia en 3¬™
                
                if random.random() < prob_renuncia:
                    gestion_plazas['renuncias'][destino_id][ronda].append(titular_id)
                    
                    # Liberar plaza para la siguiente ronda
                    if ronda != 'Adjudicaci√≥n Final':
                        siguiente_ronda_idx = rondas.index(ronda) + 1
                        if siguiente_ronda_idx < len(rondas):
                            siguiente_ronda = rondas[siguiente_ronda_idx]
                            gestion_plazas['plazas_disponibles'][destino_id][siguiente_ronda] += 1
                            
                            # Promover suplente a titular si hay suplentes disponibles
                            suplentes_disponibles = gestion_plazas['asignaciones_suplentes'][destino_id][ronda]
                            if suplentes_disponibles:
                                # Promover al primer suplente (mejor expediente)
                                promovido = suplentes_disponibles.pop(0)
                                gestion_plazas['asignaciones_titulares'][destino_id][siguiente_ronda].append(promovido)
                                gestion_plazas['plazas_disponibles'][destino_id][siguiente_ronda] -= 1
    
    return gestion_plazas

# FUNCI√ìN ELIMINADA: generar_eventlog_con_plazas
# Esta funci√≥n ten√≠a errores en el mapeo de actividades y duplicaba funcionalidad.
# Se mantiene la funci√≥n generar_eventlog() original que ya est√° correctamente implementada.

def actualizar_estados_desde_gestion_plazas(estudiantes_df, gestion_plazas):
    """
    Actualiza los estados finales y destinos asignados bas√°ndose en la gesti√≥n real de plazas.
    """
    print("üîÑ Actualizando estados finales desde gesti√≥n de plazas...")
    
    estudiantes_actualizado = estudiantes_df.copy()
    
    for idx, row in estudiantes_actualizado.iterrows():
        estudiante_id = row['EstudianteID']
        destino_solicitado = row['DestinoSolicitado']
        estado_original = row['EstadoFinal']
        
        # Verificar si el estudiante fue asignado como titular en alguna ronda
        fue_titular = False
        ronda_asignacion = None
        destino_final = None
        renuncio = False
        
        for ronda in ['1¬™ Adjudicaci√≥n', '2¬™ Adjudicaci√≥n', '3¬™ Adjudicaci√≥n', 'Adjudicaci√≥n Final']:
            if destino_solicitado in gestion_plazas['asignaciones_titulares']:
                titulares_ronda = gestion_plazas['asignaciones_titulares'][destino_solicitado][ronda]
                renuncias_ronda = gestion_plazas['renuncias'][destino_solicitado][ronda]
                
                if estudiante_id in titulares_ronda:
                    fue_titular = True
                    ronda_asignacion = ronda
                    destino_final = destino_solicitado
                    
                    # Verificar si renunci√≥
                    if estudiante_id in renuncias_ronda:
                        renuncio = True
                        # Si renunci√≥, no es su destino final
                        destino_final = None
                    else:
                        # Si no renunci√≥, este es su destino final
                        break
        
        # Determinar estado final bas√°ndose en la gesti√≥n de plazas
        if estado_original == 'Excluido':
            # Los excluidos siguen siendo excluidos
            nuevo_estado = 'Excluido'
            nuevo_destino = np.nan
        elif fue_titular and not renuncio:
            # Fue titular y no renunci√≥ = Aceptado
            nuevo_estado = 'Aceptado'
            nuevo_destino = destino_final
        elif fue_titular and renuncio:
            # Fue titular pero renunci√≥ = Renuncia
            nuevo_estado = 'Renuncia'
            nuevo_destino = np.nan
        else:
            # Nunca fue titular = No asignado
            nuevo_estado = 'No asignado'
            nuevo_destino = np.nan
        
        # Actualizar el DataFrame
        estudiantes_actualizado.at[idx, 'EstadoFinal'] = nuevo_estado
        estudiantes_actualizado.at[idx, 'DestinoAsignado'] = nuevo_destino
    
    return estudiantes_actualizado

def generar_reporte_gestion_plazas(gestion_plazas, destinos_df, estudiantes_df):
    """
    Genera un reporte detallado de la gesti√≥n de plazas por destino y ronda.
    """
    print("üìä Generando reporte de gesti√≥n de plazas...")
    
    reporte = []
    
    for destino_id in gestion_plazas['plazas_disponibles']:
        destino_info = destinos_df[destinos_df['DestinoID'] == destino_id].iloc[0]
        nombre_destino = destino_info['NombreDestino']
        plazas_totales = destino_info['N√∫meroPlazas']
        
        for ronda in ['1¬™ Adjudicaci√≥n', '2¬™ Adjudicaci√≥n', '3¬™ Adjudicaci√≥n', 'Adjudicaci√≥n Final']:
            titulares = gestion_plazas['asignaciones_titulares'][destino_id][ronda]
            suplentes = gestion_plazas['asignaciones_suplentes'][destino_id][ronda]
            renuncias = gestion_plazas['renuncias'][destino_id][ronda]
            plazas_disponibles = gestion_plazas['plazas_disponibles'][destino_id][ronda]
            
            # Calcular estad√≠sticas
            num_titulares = len(titulares)
            num_suplentes = len(suplentes)
            num_renuncias = len(renuncias)
            total_candidatos = num_titulares + num_suplentes
            tasa_ocupacion = (num_titulares / plazas_totales * 100) if plazas_totales > 0 else 0
            tasa_renuncia = (num_renuncias / num_titulares * 100) if num_titulares > 0 else 0
            
            reporte.append({
                'DestinoID': destino_id,
                'NombreDestino': nombre_destino,
                'Ronda': ronda,
                'PlazasTotales': plazas_totales,
                'PlazasDisponibles': plazas_disponibles,
                'NumTitulares': num_titulares,
                'NumSuplentes': num_suplentes,
                'NumRenuncias': num_renuncias,
                'TotalCandidatos': total_candidatos,
                'TasaOcupacion': round(tasa_ocupacion, 2),
                'TasaRenuncia': round(tasa_renuncia, 2),
                'Competitividad': 'Alta' if total_candidatos > plazas_totales * 2 else 'Media' if total_candidatos > plazas_totales else 'Baja'
            })
    
    reporte_df = pd.DataFrame(reporte)
    return reporte_df

# ---- Ejecuci√≥n principal ----

if __name__ == "__main__":
    # Inicializamos el conjunto de estudiantes con alegaciones
    # (Ya no necesitamos variable global, se pasa como par√°metro)

    print("üöÄ Iniciando generaci√≥n de datos Erasmus con coordinaci√≥n mejorada...")

    destinos = generar_destinos(NUM_DESTINOS)
    estudiantes = generar_estudiantes(NUM_ESTUDIANTES, destinos)
    actividades = generar_actividades()

    # Generamos alegaciones PRIMERO para obtener los IDs correspondientes
    alegaciones, estudiantes_con_alegaciones_ids = generar_alegaciones(estudiantes)

    # PASO 1: Simular adjudicaci√≥n con control de plazas
    print("üéØ Simulando proceso de adjudicaci√≥n con control de plazas...")
    gestion_plazas = simular_adjudicacion_con_plazas(estudiantes, destinos)

    # PASO 2: Generar EventLog como fuente de verdad (CORREGIDO: usar funci√≥n original)
    print("üìä Generando EventLog como fuente de verdad...")
    eventlog = generar_eventlog(estudiantes, actividades, destinos, estudiantes_con_alegaciones_ids)

    # PASO 2.5: Actualizar estados finales bas√°ndose en gesti√≥n de plazas
    print("üîÑ Actualizando estados finales desde gesti√≥n de plazas...")
    estudiantes = actualizar_estados_desde_gestion_plazas(estudiantes, gestion_plazas)

    # PASO 3: Extraer hist√≥rico coherente desde gesti√≥n de plazas
    print("üìã Extrayendo hist√≥rico de adjudicaciones desde gesti√≥n de plazas...")
    historico = extraer_historico_desde_gestion_plazas(gestion_plazas, eventlog)

    # PASO 3.5: Sincronizar fechas entre hist√≥rico y EventLog
    historico = sincronizar_fechas_historico_eventlog(historico, eventlog)

    # PASO 3.6: Sincronizar fechas de alegaciones con EventLog
    print("üîÑ Sincronizando fechas de alegaciones con EventLog...")
    alegaciones = sincronizar_alegaciones_eventlog(alegaciones, eventlog)

    # PASO 4: Generar reporte de gesti√≥n de plazas
    print("üìä Generando reporte de gesti√≥n de plazas...")
    reporte_plazas = generar_reporte_gestion_plazas(gestion_plazas, destinos, estudiantes)

    # PASO 5: Validar coherencia entre todas las fuentes
    print("‚úÖ Validando coherencia entre fuentes de datos...")
    inconsistencias = validar_coherencia_datos(estudiantes, eventlog, historico)

    # --- Correcci√≥n de Tipos de Datos antes de Guardar ---
    # Convertir DestinoAsignado a tipo Int64 nullable de pandas para permitir NaN pero ser entero
    estudiantes['DestinoAsignado'] = estudiantes['DestinoAsignado'].astype(pd.Int64Dtype())
    historico['DestinoID'] = historico['DestinoID'].astype(pd.Int64Dtype()) # Tambi√©n en hist√≥rico por consistencia

    # Guardar todos los CSVs
    print("üíæ Guardando archivos CSV...")
    destinos.to_csv(f"{RUTA_DATA}/Destinos.csv", index=False)
    estudiantes.to_csv(f"{RUTA_DATA}/Estudiantes.csv", index=False)
    actividades.to_csv(f"{RUTA_DATA}/Actividades.csv", index=False)
    eventlog.to_csv(f"{RUTA_DATA}/EventLog.csv", index=False)
    alegaciones.to_csv(f"{RUTA_DATA}/Alegaciones.csv", index=False)
    historico.to_csv(f"{RUTA_DATA}/HistoricoAdjudicaciones.csv", index=False)
    reporte_plazas.to_csv(f"{RUTA_DATA}/ReporteGestionPlazas.csv", index=False)

    # Guardar reporte de validaci√≥n
    if inconsistencias:
        with open(f"{RUTA_DATA}/reporte_inconsistencias.txt", "w", encoding="utf-8") as f:
            f.write("REPORTE DE INCONSISTENCIAS\n")
            f.write("=" * 50 + "\n\n")
            for inc in inconsistencias:
                f.write(f"- {inc}\n")
        print(f"‚ö†Ô∏è Se guard√≥ reporte de inconsistencias en {RUTA_DATA}/reporte_inconsistencias.txt")

    print(f"\n‚úÖ Generaci√≥n de CSVs Erasmus COMPLETADA con coordinaci√≥n mejorada.")
    print(f"üìà Resumen: {len(inconsistencias)} inconsistencias detectadas y reportadas.")
